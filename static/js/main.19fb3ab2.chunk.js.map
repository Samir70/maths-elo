{"version":3,"sources":["NewQs/MetricConversion.js","NewQs/TimeConversion.js","NewQs/VocabQ.js","NewQs/QTypes.js","NewQs/NumberOperations.js","NewQs/GetNewQ.js","Ratings/Ratings.js","components/Question.js","Reducers/actions.js","components/QWithReveal.js","components/ClassRoom.js","App.js","Reducers/Reducer.js","serviceWorker.js","index.js"],"names":["conversionPairs","large","small","ratio","MetricConversionQ","subQType","Qtype","Number","Math","floor","random","length","convFacts","forward","extraLarge","q","a","QType","metricConversion","hms2sec","h","m","s","rnd","outof","TimeConversionQ","subType","left","right","leftUnits","rightUnits","sec","min","hr","totalSec","TimeConversion","console","log","answerFormat","VocabQList","VocabQ","question","subQTypes","QTypes","GetNewQ","type","MultiplyNumbers","ceil","b","c","returnable","MultiplyNumberQ","transformRating","rating","NewRatings","rating1","rating2","result","howProvisional","r1","r2","ratingSum","newR1","newR2","connect","state","quAndA","wrongAnswers","userAnswer","userRating","UpdateUserAnswer","newAnswer","payload","UserIsCorrect","newUserRating","newQuAndA","UserIsWrong","wrongAnswer","wrongAnswerList","map","x","i","key","onSubmit","e","preventDefault","userIsCorrect","toLowerCase","newQ","newR","className","name","value","onChange","target","QWithReveal","showAnswer","quandaClass","props","rowType","handleClick","setState","RevealButton","onClick","Answer","this","React","Component","ClassRoom","Qlist","QTypeSplit","split","push","currentQType","showClassRoom","ToggleClass","giveme5btn","giveMeTestsbtn","initialState","reducer","action","Boolean","window","location","hostname","match","ReactDOM","render","store","createStore","Reducer","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.19fb3ab2.chunk.js","sourcesContent":["import { metricConversion } from './QTypes';\r\n\r\nconst conversionPairs = [\r\n  'zeroQ',\r\n    {large:['metres', 'm'], small:['centimetres', 'cm'], ratio:100},\r\n    {large:['metres', 'm'], small:['millimetres', 'mm'], ratio:1000},\r\n    {large:['kilometres', 'Km'], small:['metres', 'm'], ratio:1000},\r\n\r\n    {large:['grams', 'g'], small:['milligrams', 'mg'], ratio:1000},\r\n    {large:['kilograms', 'Kg'], small:['grams', 'g'], ratio:1000},\r\n\r\n    {large:['litres', 'L'], small:['centilitres', 'cL'], ratio:100},\r\n    {large:['litres', 'L'], small:['millimetres', 'mL'], ratio:1000},\r\n]\r\n\r\nconst MetricConversionQ = (subQType) => {\r\n    var Qtype = Number(subQType) || Math.floor(Math.random()*(conversionPairs.length-1))+1;\r\n    //console.log(metricConversion+'-'+Qtype);\r\n    var convFacts = conversionPairs[Qtype];\r\n    let forward = Math.random() < 0.5 ? true : false,\r\n        extraLarge = Math.random() < 0.25 ? 1 : Math.random() < 0.8 ? 10 : 100;\r\n    let small = Math.floor(Math.random()*convFacts.ratio)*extraLarge,\r\n        large = small/convFacts.ratio;\r\n    return forward ? \r\n      {q:\"Convert \"+small+convFacts.small[1]+\" to \"+convFacts.large[0], \r\n        a:''+large, QType:metricConversion+'-'+Qtype} : \r\n      {q:\"Convert \"+large+convFacts.large[1]+\" to \"+convFacts.small[0], \r\n        a:''+small, QType:metricConversion+'-'+Qtype} \r\n}\r\n\r\nexport default MetricConversionQ;\r\n","import { TimeConversion } from './QTypes';\r\n\r\n// so ohr 2min 28sec => 148sec\r\nconst hms2sec = (h, m, s) => h*3600+m*60+s\r\n\r\nconst conversionPairs = [\r\n    'null',\r\n    'secMin', 'secMinHr',\r\n    //'minHr', 'minHrDays',\r\n    //'hrDays', 'hrWeeks', 'hrDaysWeeks'\r\n]\r\n\r\nconst rnd = (outof) => Math.floor(Math.random()*outof);\r\n\r\nconst TimeConversionQ = (subType) => {\r\n    var subQType = Number(subType) || Math.floor(Math.random()*(conversionPairs.length-1))+1;\r\n    /* direction of conversion decided by forward variable\r\n    * before composing quAndA: parts are labeled left, middle and right\r\n    * so 1min 78sec will give\r\n    * LMR: 138, 1, 78\r\n    * and the Qs\r\n    * 138 seconds is 1min and how many seconds?\r\n    * 138 seconds is 18seconds and how many minutes?\r\n    * Convert 1min 78sec into seconds\r\n    * because answer should be a number\r\n    */\r\n\r\n    let forward = Math.random() < 0.5 ? true : false;\r\n    var left, right, leftUnits, rightUnits;\r\n    var sec = rnd(60), min = rnd(60), hr = rnd(24);\r\n    switch (conversionPairs[subQType]) {\r\n        case 'secMin' : {\r\n            var totalSec = hms2sec(0, min, sec);\r\n            left =''+totalSec; right = min+'min '+sec+'sec';\r\n            leftUnits = 'seconds'; rightUnits = 'minutes and seconds';\r\n            break\r\n        }\r\n        case 'secMinHr' : {\r\n            totalSec = hms2sec(hr, min, sec);\r\n            left = ''+totalSec; right=hr+'hr '+min+'min '+sec+'sec';\r\n            leftUnits='seconds'; rightUnits = 'hours minutes and seconds';\r\n            break\r\n        }\r\n        default: return { q:'TimeConversion default Q', a:'625' }\r\n    }\r\n    subQType = TimeConversion+'-'+subQType;\r\n    console.log(subQType);\r\n    return forward ? \r\n        { q:'Convert '+left+leftUnits+' to '+rightUnits, \r\n          a:right, QType:subQType, answerFormat:'string' } :\r\n        { q:'Convert '+right+' to '+leftUnits,\r\n          a:left, QType:subQType, answerFormat:'number' }\r\n}\r\n\r\nexport default TimeConversionQ\r\n","import { Vocab } from './QTypes';\r\n\r\nconst VocabQList = [\r\n    // circle vocab\r\n    {q:'What do you call a line that goes from the edge of a circle, through the centre, to the other side?', \r\n     a:'diameter'},\r\n    {q:'What do you call a line from the centre of a circle to the edge of the circle?', a:'radius'},\r\n    {q:'What do you call a line that just touches the outside of a circle?', a:'tangent'},\r\n    {q:'What do you call a line cuts across a circle, but not necessarily through the centre?', a:'chord'},\r\n    {q:'A chord cuts a circle into two ...?', a:'segments'},\r\n    {q:'Two radii (radiuses) cut out a piece like a slice of pie, called a ...?', a:'sector'}\r\n]\r\n\r\nconst VocabQ = () => {\r\n    var question = Math.floor(Math.random()*VocabQList.length);\r\n    return {...VocabQList[question], answerFormat:'string', QType:Vocab}\r\n}\r\n\r\nexport default VocabQ;\r\n","export const metricConversion = 'metricConversion';\r\nexport const TimeConversion = 'TimeConversion';\r\nexport const MultiplyNumbers = 'MultiplyNumbers';\r\nexport const Vocab = 'Vocab';\r\n\r\n// Aiming for QCodes which the app can parse to produce a new question of the same type\r\n// but with different numbers.\r\n\r\n// Format will be a string beginning with a QType\r\n// 'metricConversion-2'\r\n// would get us the subQType with index 2 for that topic\r\n// whereas: just 'metricConversion' (or 'metricConversion-0') \r\n// should allow for a random choice of subQType","import { MultiplyNumbers } from './QTypes';\r\n\r\nconst subQTypes = [\r\n    'zeroQ',\r\n    'sq', 'cube', \r\n    //'twos', 'threes', 'fours', 'fives', 'sixes', 'sevens', 'eights', 'nines', 'tens',\r\n    'sqEnd5', 'sqEnd1',\r\n    'gridWhole'//, 'decimal'\r\n]\r\n\r\nexport const MultiplyNumberQ = (subQType) => {\r\n    var type = Number(subQType) || Math.floor(Math.random()*(subQTypes.length-1))+1;\r\n    console.log(MultiplyNumbers+'-'+type)\r\n    var a = Math.ceil(Math.random()*9)+1, \r\n        b = Math.ceil(Math.random()*9)+1,\r\n        c = Math.ceil(Math.random()*90)+10;\r\n    var returnable = {QType:MultiplyNumbers+'-'+type}\r\n    switch (subQTypes[type]) {\r\n        case 'sq': return {...returnable, q:'What is '+a+' squared?', a:''+(a*a)}\r\n        case 'sqEnd5': {\r\n            a = a*10+5;\r\n            return {...returnable, q:'What is '+a+' squared?', a:''+(a*a)}\r\n        }\r\n        case 'sqEnd1': {\r\n            a = a*10+1;\r\n            return {...returnable, q:'What is '+a+' squared?', a:''+(a*a)}\r\n        }\r\n        case 'cube': return {...returnable, q:'What is '+a+' cubed?', a:''+(a*a*a)}\r\n        case 'gridWhole': return {...returnable, q:'What is '+c+' times '+(a*b)+'?', a:''+(a*b*c) }\r\n        default: return { q:'MultiplyNumberQ default Q', a:'625' }\r\n    }\r\n}","import MetricConversionQ from './MetricConversion';\r\nimport TimeConversionQ from './TimeConversion';\r\nimport VocabQ from './VocabQ';\r\nimport { MultiplyNumberQ } from './NumberOperations';\r\nimport { metricConversion, TimeConversion, MultiplyNumbers, Vocab } from './QTypes';\r\nconst QTypes = [metricConversion, TimeConversion, MultiplyNumbers, Vocab];\r\n\r\nconst GetNewQ = (QType, subQType) => {\r\n  //console.log('QType and subQType', QType, subQType)\r\n  var type = QType || QTypes[Math.floor(Math.random()*QTypes.length)]\r\n  switch (type) {\r\n      case metricConversion : return MetricConversionQ(subQType);\r\n      case MultiplyNumbers : return MultiplyNumberQ(subQType);\r\n      case TimeConversion : return TimeConversionQ(subQType);\r\n      case Vocab : return VocabQ();\r\n      default: return {q:\"How many mathematicians does it take to change a light bulb\", a:\"1\"}\r\n  }\r\n}\r\n\r\nexport default GetNewQ;\r\n","const transformRating = (rating) => 10**(rating/400);\r\n\r\n// in this, the result is from the point of view of player 1 (human) \r\n// who answered question with difficulty of rating2\r\n// howProvisional will be in [1, 10]\r\n// if the humans rating is very provisional (ie: 10) then rating1 changes by more\r\n// but the question's rating changes by little\r\nconst NewRatings = (rating1, rating2, result, howProvisional) => {\r\n    var r1=transformRating(rating1), r2 = transformRating(rating2);\r\n    // expected result for each player\r\n    var ratingSum = r1+r2;\r\n    var e1=r1/ratingSum, e2=r2/ratingSum;\r\n    // console.log('r1, e1', r1, e1)\r\n\r\n    var newR1 = rating1 + 32*howProvisional*(result - e1),\r\n        newR2 = rating2 + (32/howProvisional)*(1-result - e2);\r\n    \r\n    return [Math.floor(newR1), Math.floor(newR2)]\r\n}\r\n\r\nexport default NewRatings;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { UpdateUserAnswer, UserIsCorrect, UserIsWrong } from '../Reducers/actions';\r\nimport GetNewQ from '../NewQs/GetNewQ';\r\nimport NewRatings from '../Ratings/Ratings';\r\n\r\nconst Question = ({ \r\n            quAndA, userAnswer, userRating, wrongAnswers, \r\n            UpdateUserAnswer, UserIsCorrect, UserIsWrong }) => {\r\n    const changeHandler = (e) => {\r\n        UpdateUserAnswer(e.target.value);\r\n    }\r\n    const submitHandler = (e) => {\r\n        e.preventDefault();\r\n        // allow answer like 1.70 when the required answer is 1.7\r\n        // converting to Number will do this\r\n        // but take care if questions types are included that need a string as an answer\r\n        switch (quAndA.answerFormat) {\r\n            case 'string' : {\r\n                var userIsCorrect = userAnswer.toLowerCase() === quAndA.a.toLowerCase(); \r\n                break\r\n            }\r\n            default: userIsCorrect = Number(userAnswer) === Number(quAndA.a)\r\n        }\r\n        if (userIsCorrect) { \r\n            const newQ = GetNewQ('', '');\r\n            var newR = NewRatings(userRating, 1500, 1, 1)[0]\r\n            UserIsCorrect(newR, newQ)\r\n        } else {\r\n            newR = NewRatings(userRating, 1500, 0, 1)[0]\r\n            UserIsWrong(newR, userAnswer)\r\n        }\r\n    }\r\n\r\n    const wrongAnswerList = wrongAnswers.map((x, i) => \r\n        <p key={i}>{x} was wrong</p>)\r\n\r\n    return (\r\n        <div>\r\n            <h2>{quAndA.q}</h2>\r\n            <form onSubmit={submitHandler}>\r\n                <input className=\"answerbox\"\r\n                    type=\"text\"\r\n                    name=\"answerbox\"\r\n                    value={userAnswer}\r\n                    onChange={changeHandler} />\r\n            </form>\r\n            {wrongAnswerList}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        quAndA: state.quAndA,\r\n        wrongAnswers: state.wrongAnswers,\r\n        userAnswer: state.userAnswer,\r\n        userRating: state.userRating\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { UpdateUserAnswer, UserIsCorrect, UserIsWrong })(Question);","export const UPDATE_USER_ANSWER = 'UPDATE_USER_ANSWER';\r\nexport const USER_IS_CORRECT = 'USER_IS_CORRECT';\r\nexport const USER_IS_WRONG = 'USER_IS_WRONG';\r\nexport const TOGGLE_CLASS = 'TOGGLE_CLASS';\r\n\r\nexport const UpdateUserAnswer = (newAnswer) => {\r\n    return { type: UPDATE_USER_ANSWER, payload: newAnswer}\r\n}\r\n\r\nexport const UserIsCorrect = (newUserRating, newQuAndA) => {\r\n    return { type:USER_IS_CORRECT, userRating: newUserRating, quAndA: newQuAndA }\r\n}\r\n\r\nexport const UserIsWrong = (newUserRating, userAnswer) => {\r\n    return { type:USER_IS_WRONG, userRating: newUserRating, wrongAnswer:userAnswer }\r\n}\r\n\r\nexport const ToggleClass = () => {\r\n    return {type:TOGGLE_CLASS}\r\n}\r\n","import React from 'react';\r\n\r\nclass QWithReveal extends React.Component {\r\n    state = {showAnswer: false}\r\n    quandaClass = Number(this.props.rowType) % 2 ? \"quandaBlock-odd\" : \"quandaBlock-even\";\r\n    \r\n    \r\n    handleClick = () => {\r\n        this.setState({showAnswer:!this.state.showAnswer})\r\n    }\r\n    RevealButton = <button className=\"revealBtn\" onClick={this.handleClick}>Show answer</button>\r\n    Answer = <h2 className=\"aBlock\" onClick={this.handleClick} >{this.props.a}</h2>; \r\n\r\n    render() {\r\n        return (\r\n            <div className={this.quandaClass}>\r\n                <h2 className=\"qBlock\">{this.props.q}</h2>\r\n                {this.state.showAnswer ? this.Answer : this.RevealButton}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default QWithReveal;","import React from 'react';\r\nimport QWithReveal from './QWithReveal';\r\nimport GetNewQ from '../NewQs/GetNewQ';\r\n\r\nconst ClassRoom = (props) => {\r\n    var Qlist = [];\r\n    var QTypeSplit = props.QType.split('-');\r\n    console.log(props.QType, QTypeSplit)\r\n    for (var i=0; i<5; i++) {\r\n        var newQ=GetNewQ(QTypeSplit[0], QTypeSplit[1]);\r\n        Qlist.push(\r\n            <QWithReveal q={newQ.q} a={newQ.a} rowType={''+i} key={i} />\r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n            <h2>This is the class room</h2>\r\n            <h3>Where you simply click to see the answers</h3>\r\n            {Qlist}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ClassRoom;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Question from './components/Question';\r\nimport ClassRoom from './components/ClassRoom';\r\nimport { ToggleClass } from './Reducers/actions';\r\nimport './App.css';\r\n\r\nconst App = ({userRating, currentQType, showClassRoom, ToggleClass}) => {\r\n  const giveme5btn = <button \r\n    className='toggleClass-btn'\r\n    onClick={ToggleClass} >Give me 5 in the class room</button>\r\n  const giveMeTestsbtn = <button \r\n    className='toggleClass-btn'\r\n    onClick={ToggleClass} >Take me back to the test room</button>\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"header\" >\r\n        {showClassRoom ? giveMeTestsbtn : giveme5btn }\r\n        <h1>Maths R&R -- rate and review your maths</h1>\r\n        <p className=\"user-rating\" >User Rating:<br /> {userRating}</p>\r\n      </div>\r\n      {showClassRoom ? <ClassRoom QType={currentQType} /> : <Question  />}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userRating: state.userRating,\r\n    currentQType: state.quAndA.QType,\r\n    showClassRoom: state.showClassRoom\r\n  }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, {ToggleClass})(App);\r\n","import { UPDATE_USER_ANSWER, USER_IS_CORRECT, USER_IS_WRONG, TOGGLE_CLASS } from './actions';\r\nimport GetNewQ from '../NewQs/GetNewQ';\r\n\r\nconst newQ = GetNewQ('Vocab', '')\r\nconst initialState = {\r\n    userRating: 1500,\r\n    quAndA: newQ,\r\n    userAnswer: '',\r\n    wrongAnswers: [], \r\n    showClassRoom: false\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case USER_IS_CORRECT : return {\r\n            ...state, \r\n            quAndA:action.quAndA, \r\n            userRating:action.userRating,\r\n            userAnswer:'', wrongAnswers:[]}\r\n        case USER_IS_WRONG : return {\r\n            ...state,\r\n            userRating: action.userRating,\r\n            wrongAnswers:[...state.wrongAnswers, action.wrongAnswer],\r\n            userAnswer: ''\r\n        }\r\n        case UPDATE_USER_ANSWER : return {...state, userAnswer:action.payload}\r\n        case TOGGLE_CLASS : return {...state, showClassRoom:!state.showClassRoom}\r\n        default : return state;\r\n    } \r\n}\r\n\r\nexport default reducer;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport Reducer from './Reducers/Reducer';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={createStore(Reducer)} ><App /></Provider>, \n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}