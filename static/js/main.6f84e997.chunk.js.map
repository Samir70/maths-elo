{"version":3,"sources":["NewQs/MetricConversion.js","NewQs/NumberOperations.js","NewQs/GetNewQ.js","NewQs/QTypes.js","Ratings/Ratings.js","components/Question.js","Reducers/actions.js","App.js","Reducers/Reducer.js","serviceWorker.js","index.js"],"names":["conversionPairs","large","small","ratio","MetricConversionQ","Qtype","Math","floor","random","length","convFacts","forward","extraLarge","q","a","QTypes","MultiplyNumberQ","types","type","ceil","b","c","GetNewQ","transformRating","rating","NewRatings","rating1","rating2","result","howProvisional","r1","r2","ratingSum","e1","e2","console","log","newR1","newR2","connect","state","quAndA","wrongAnswers","userAnswer","userRating","UpdateUserAnswer","newAnswer","payload","UserIsCorrect","newUserRating","newQuAndA","UserIsWrong","wrongAnswer","wrongAnswerList","map","x","i","key","onSubmit","e","preventDefault","Number","newQ","newR","className","name","value","onChange","target","initialState","reducer","action","Boolean","window","location","hostname","match","ReactDOM","render","store","createStore","Reducer","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6f84e997.chunk.js","sourcesContent":["const conversionPairs = [\r\n    {large:['metres', 'm'], small:['centimetres', 'cm'], ratio:100},\r\n    {large:['metres', 'm'], small:['millimetres', 'mm'], ratio:1000},\r\n    {large:['kilometres', 'Km'], small:['metres', 'm'], ratio:1000},\r\n\r\n    {large:['grams', 'g'], small:['milligrams', 'mg'], ratio:1000},\r\n    {large:['kilograms', 'Kg'], small:['grams', 'g'], ratio:1000},\r\n\r\n    {large:['litres', 'L'], small:['centilitres', 'cL'], ratio:100},\r\n    {large:['litres', 'L'], small:['millimetres', 'mL'], ratio:1000},\r\n]\r\n\r\nconst MetricConversionQ = () => {\r\n    var Qtype = Math.floor(Math.random()*conversionPairs.length);\r\n    var convFacts = conversionPairs[Qtype];\r\n    let forward = Math.random() < 0.5 ? true : false,\r\n        extraLarge = Math.random() < 0.25 ? 1 : Math.random() < 0.8 ? 10 : 100;\r\n    let small = Math.floor(Math.random()*convFacts.ratio)*extraLarge,\r\n        large = small/convFacts.ratio;\r\n    return forward ? \r\n      {q:\"Convert \"+small+convFacts.small[1]+\" to \"+convFacts.large[0], a:''+large} : \r\n      {q:\"Convert \"+large+convFacts.large[1]+\" to \"+convFacts.small[0], a:''+small} \r\n}\r\n\r\nexport default MetricConversionQ;\r\n","const QTypes = [\r\n    'sq', 'cube', \r\n    //'twos', 'threes', 'fours', 'fives', 'sixes', 'sevens', 'eights', 'nines', 'tens',\r\n    'sqEnd5', 'sqEnd1',\r\n    'gridWhole'//, 'decimal'\r\n]\r\n\r\nexport const MultiplyNumberQ = (types = QTypes) => {\r\n    var type = Math.floor(Math.random()*types.length);\r\n    var a = Math.ceil(Math.random()*9)+1, \r\n        b = Math.ceil(Math.random()*9)+1,\r\n        c = Math.ceil(Math.random()*90)+9;\r\n    switch (types[type]) {\r\n        case 'sq': return {q:'What is '+a+' squared?', a:''+(a*a)}\r\n        case 'sqEnd5': {\r\n            a = a*10+5;\r\n            return {q:'What is '+a+' squared?', a:''+(a*a)}\r\n        }\r\n        case 'sqEnd1': {\r\n            a = a*10+1;\r\n            return {q:'What is '+a+' squared?', a:''+(a*a)}\r\n        }\r\n        case 'cube': return {q:'What is '+a+' cubed?', a:''+(a*a*a)}\r\n        case 'gridWhole': return {q:'What is '+c+' times '+(a*b)+'?', a:''+(a*b*c) }\r\n        default: return { q:'MultiplyNumberQ default Q', a:'625' }\r\n    }\r\n}","import MetricConversionQ from './MetricConversion';\r\nimport { MultiplyNumberQ } from './NumberOperations';\r\nimport { metricConversion, MultiplyNumbers } from './QTypes';\r\n\r\nconst GetNewQ = (types = [metricConversion, MultiplyNumbers]) => {\r\n  var type = Math.floor(Math.random()*types.length)\r\n  switch (types[type]) {\r\n      case metricConversion : return MetricConversionQ();\r\n      case MultiplyNumbers : return MultiplyNumberQ();\r\n      default: return {q:\"How many mathematicians does it take to change a light bulb\", a:\"1\"}\r\n  }\r\n}\r\n\r\nexport default GetNewQ;\r\n","export const metricConversion = 'metricConversion';\r\nexport const MultiplyNumbers = 'gridMethod';","const transformRating = (rating) => 10**(rating/400);\r\n\r\n// in this, the result is from the point of view of player 1 (human) \r\n// who answered question with difficulty of rating2\r\n// howProvisional will be in [1, 10]\r\n// if the humans rating is very provisional (ie: 10) then rating1 changes by more\r\n// but the question's rating changes by little\r\nconst NewRatings = (rating1, rating2, result, howProvisional) => {\r\n    var r1=transformRating(rating1), r2 = transformRating(rating2);\r\n    // expected result for each player\r\n    var ratingSum = r1+r2;\r\n    var e1=r1/ratingSum, e2=r2/ratingSum;\r\n    console.log('r1, e1', r1, e1)\r\n\r\n    var newR1 = rating1 + 32*howProvisional*(result - e1),\r\n        newR2 = rating2 + (32/howProvisional)*(1-result - e2);\r\n    \r\n    return [Math.floor(newR1), Math.floor(newR2)]\r\n}\r\n\r\nexport default NewRatings;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { UpdateUserAnswer, UserIsCorrect, UserIsWrong } from '../Reducers/actions';\r\nimport GetNewQ from '../NewQs/GetNewQ';\r\nimport NewRatings from '../Ratings/Ratings';\r\n\r\nconst Question = ({ \r\n            quAndA, userAnswer, userRating, wrongAnswers, \r\n            UpdateUserAnswer, UserIsCorrect, UserIsWrong }) => {\r\n    const changeHandler = (e) => {\r\n        UpdateUserAnswer(e.target.value);\r\n    }\r\n    const submitHandler = (e) => {\r\n        e.preventDefault();\r\n        // allow answer like 1.70 when the required answer is 1.7\r\n        // but take care if questions types are included that need a string as an answer\r\n        if (Number(userAnswer) === Number(quAndA.a)) { \r\n            const newQ = GetNewQ();\r\n            var newR = NewRatings(userRating, 1500, 1, 1)[0]\r\n            UserIsCorrect(newR, newQ)\r\n        } else {\r\n            newR = NewRatings(userRating, 1500, 0, 1)[0]\r\n            UserIsWrong(newR, userAnswer)\r\n        }\r\n    }\r\n\r\n    const wrongAnswerList = wrongAnswers.map((x, i) => \r\n        <p key={i}>{x} was wrong</p>)\r\n\r\n    return (\r\n        <div>\r\n            <h2>{quAndA.q}</h2>\r\n            <form onSubmit={submitHandler}>\r\n                <input className=\"answerbox\"\r\n                    type=\"text\"\r\n                    name=\"answerbox\"\r\n                    value={userAnswer}\r\n                    onChange={changeHandler} />\r\n            </form>\r\n            {wrongAnswerList}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        quAndA: state.quAndA,\r\n        wrongAnswers: state.wrongAnswers,\r\n        userAnswer: state.userAnswer,\r\n        userRating: state.userRating\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { UpdateUserAnswer, UserIsCorrect, UserIsWrong })(Question);","export const UPDATE_USER_ANSWER = 'UPDATE_USER_ANSWER';\r\nexport const USER_IS_CORRECT = 'USER_IS_CORRECT';\r\nexport const USER_IS_WRONG = 'USER_IS_WRONG';\r\n\r\nexport const UpdateUserAnswer = (newAnswer) => {\r\n    return { type: UPDATE_USER_ANSWER, payload: newAnswer}\r\n}\r\n\r\nexport const UserIsCorrect = (newUserRating, newQuAndA) => {\r\n    return { type:USER_IS_CORRECT, userRating: newUserRating, quAndA: newQuAndA }\r\n}\r\n\r\nexport const UserIsWrong = (newUserRating, userAnswer) => {\r\n    return { type:USER_IS_WRONG, userRating: newUserRating, wrongAnswer:userAnswer }\r\n}\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Question from './components/Question';\r\nimport './App.css';\r\n\r\nconst App = ({userRating}) => {\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"header\" >\r\n        <button>Pick topics</button>\r\n        <h1>Maths R&R -- rate and review your maths</h1>\r\n        <p className=\"user-rating\" >User Rating:<br /> {userRating}</p>\r\n      </div>\r\n      <Question  />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userRating: state.userRating\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(App);\r\n","import { UPDATE_USER_ANSWER, USER_IS_CORRECT, USER_IS_WRONG } from './actions'\r\n\r\nconst initialState = {\r\n    userRating: 1500,\r\n    quAndA: {q: 'Think of a number', a: '42'},\r\n    userAnswer: '',\r\n    wrongAnswers: []\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case USER_IS_CORRECT : return {\r\n            ...state, \r\n            quAndA:action.quAndA, \r\n            userRating:action.userRating,\r\n            userAnswer:'', wrongAnswers:[]}\r\n        case USER_IS_WRONG : return {\r\n            ...state,\r\n            userRating: action.userRating,\r\n            wrongAnswers:[...state.wrongAnswers, action.wrongAnswer],\r\n            userAnswer: ''\r\n        }\r\n        case UPDATE_USER_ANSWER : return {...state, userAnswer:action.payload}\r\n        default : return state;\r\n    } \r\n}\r\n\r\nexport default reducer;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport Reducer from './Reducers/Reducer';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={createStore(Reducer)} ><App /></Provider>, \n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}